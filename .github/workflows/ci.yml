name: ci

on:
  push:
    branches: ['master', 'main']
  pull_request:
    branches: ['master', 'main']

env:
  NODE_ENV: development
  CI: true
  FORCE_COLOR: true
  NUXT_CLOUDFLARE_ACCOUNT_ID: ${{ secrets.NUXT_CLOUDFLARE_ACCOUNT_ID }}
  NUXT_CLOUDFLARE_API_TOKEN: ${{ secrets.NUXT_CLOUDFLARE_API_TOKEN }}
  NUXT_CLOUDFLARE_NAMESPACE_ID: ${{ secrets.NUXT_CLOUDFLARE_NAMESPACE_ID }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --ignore-scripts

      - name: Run linting
        run: pnpm lint

  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --ignore-scripts

      - name: Run type checking
        run: pnpm type-check

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --ignore-scripts

      - name: Run tests
        run: pnpm test:run

  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --ignore-scripts

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --ignore-scripts

      - name: Install Playwright browsers
        run: pnpm test:e2e:install

      - name: Build application for E2E
        run: pnpm build

      - name: Start application
        run: |
          pnpm preview &
          echo $! > .preview-pid
        env:
          PORT: 3000

      - name: Wait for server
        run: |
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: Stop application
        if: always()
        run: |
          if [ -f .preview-pid ]; then
            kill $(cat .preview-pid) || true
            rm .preview-pid
          fi

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --ignore-scripts

      - name: Build application
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .output/
            dist/
            .nuxt/
          retention-days: 7

  upload-coverage:
    runs-on: ubuntu-latest
    needs: [coverage]
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage/
          fail_ci_if_error: false
          verbose: true

  quality-gate:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, coverage, e2e, build]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "Job Results:"
          echo "- Lint: ${{ needs.lint.result }}"
          echo "- Type Check: ${{ needs.type-check.result }}"
          echo "- Test: ${{ needs.test.result }}"
          echo "- Coverage: ${{ needs.coverage.result }}"
          echo "- E2E: ${{ needs.e2e.result }}"
          echo "- Build: ${{ needs.build.result }}"

          if [[ "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.type-check.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.coverage.result }}" == "failure" || 
                "${{ needs.e2e.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå Quality gate failed!"
            exit 1
          else
            echo "‚úÖ All checks passed successfully!"
            echo "üìä Test coverage generated"
            echo "üîç Code quality validated"
            echo "üèóÔ∏è Build completed successfully"
          fi
