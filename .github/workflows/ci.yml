name: CI/CD Pipeline

on:
  push:
    branches: ['master', 'main']
  pull_request:
    branches: ['master', 'main']

env:
  NODE_ENV: development
  CI: true
  FORCE_COLOR: true
  NUXT_CLOUDFLARE_ACCOUNT_ID: ${{ secrets.NUXT_CLOUDFLARE_ACCOUNT_ID }}
  NUXT_CLOUDFLARE_API_TOKEN: ${{ secrets.NUXT_CLOUDFLARE_API_TOKEN }}
  NUXT_CLOUDFLARE_NAMESPACE_ID: ${{ secrets.NUXT_CLOUDFLARE_NAMESPACE_ID }}

jobs:
  # ========================================
  # QUALITY CHECKS
  # ========================================

  lint:
    name: 🔍 Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile --prefer-offline
      - run: pnpm nuxt prepare
      - run: pnpm lint

  type-check:
    name: 🔧 Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile --prefer-offline
      - run: pnpm nuxt prepare
      - run: pnpm type-check

  # ========================================
  # TESTING
  # ========================================

  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile --prefer-offline
      - run: pnpm nuxt prepare
      - run: pnpm test:run

  coverage:
    name: 📊 Test Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile --prefer-offline
      - run: pnpm nuxt prepare
      - run: pnpm test:coverage
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  e2e:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile --prefer-offline
      - run: pnpm nuxt prepare
      - run: pnpm test:e2e:install
      - run: pnpm build
      - name: Start Preview Server
        run: |
          pnpm preview &
          echo $! > .preview-pid
        env:
          PORT: 3000
      - name: Wait for Server
        run: npx wait-on http://localhost:3000 --timeout 60000
      - run: pnpm test:e2e
        env:
          BASE_URL: http://localhost:3000
      - name: Cleanup Server
        if: always()
        run: |
          if [ -f .preview-pid ]; then
            kill $(cat .preview-pid) || true
            rm .preview-pid
          fi
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # ========================================
  # BUILD & DEPLOY
  # ========================================

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile --prefer-offline
      - run: pnpm nuxt prepare
      - run: pnpm build
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .output/
            dist/
            .nuxt/
          retention-days: 7

  # ========================================
  # REPORTING
  # ========================================

  upload-coverage:
    name: 📈 Upload Coverage
    runs-on: ubuntu-latest
    needs: [coverage]
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage/
          fail_ci_if_error: false
          verbose: true

  # ========================================
  # QUALITY GATE
  # ========================================

  quality-gate:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, coverage, e2e, build]
    if: always()
    steps:
      - name: Check Results
        run: |
          echo "🚀 CI/CD Pipeline Results:"
          echo "=========================="
          echo "🔍 Lint: ${{ needs.lint.result }}"
          echo "🔧 Type Check: ${{ needs.type-check.result }}"
          echo "🧪 Unit Tests: ${{ needs.test.result }}"
          echo "📊 Coverage: ${{ needs.coverage.result }}"
          echo "🌐 E2E Tests: ${{ needs.e2e.result }}"
          echo "🏗️ Build: ${{ needs.build.result }}"
          echo "=========================="

          # Check for failures
          failed_jobs=()
          [[ "${{ needs.lint.result }}" == "failure" ]] && failed_jobs+=("Lint")
          [[ "${{ needs.type-check.result }}" == "failure" ]] && failed_jobs+=("Type Check")
          [[ "${{ needs.test.result }}" == "failure" ]] && failed_jobs+=("Unit Tests")
          [[ "${{ needs.coverage.result }}" == "failure" ]] && failed_jobs+=("Coverage")
          [[ "${{ needs.e2e.result }}" == "failure" ]] && failed_jobs+=("E2E Tests")
          [[ "${{ needs.build.result }}" == "failure" ]] && failed_jobs+=("Build")

          if [ ${#failed_jobs[@]} -gt 0 ]; then
            echo "❌ Quality Gate Failed!"
            echo "Failed jobs: ${failed_jobs[*]}"
            exit 1
          else
            echo "✅ Quality Gate Passed!"
            echo "🎉 All checks completed successfully!"
          fi
